-- ### **Исследуйте динамику воронки** агрегатора такси:

-- **Шаг 1**

-- В Metabаse перейдите в таблице *skytaxi.order_list* (расшифровки идентификаторов городов 
-- и тарифов хранятся в таблицах *skytaxi.city_dict* и *skytaxi.tariff_dict*). В данной таблице 
-- хранится информация по заказам нашего агрегатора такси за июль 2021 года.

-- **Шаг 2**

-- Постройте **последовательную воронку** для июля 2021 года для Москвы и Санкт-Петербурга 
-- для тарифов “Эконом” и “Комфорт”:

-- - **Order 2 Offer** - отношение количества заказов, для которых найден водитель для 
-- предложения заказа, к общему количеству заказов.
    
--     Количество заказов, для которых найден водитель для предложения заказа, можно посмотреть
-- с помощью поля *id_driver* (если оно пустое, значит, заказ не был никому предложен).
    
-- - **Offer 2 Assign** - отношение заказов с предложением к заказам с назначением (то есть 
-- эта конверсия показывает, как водители соглашаются на предложения.
    
--    Количество назначений можно посмотреть с помощью поля *assign_time* (если оно пустое, 
-- значит, назначения на заказ не произошло).
    
-- - **Assign 2 Arrival** - отношение заказов с прибывшим на место водителем к заказам с 
-- назначением. Конверсия показывает, как клиенты отменяют после назначения, увидев время прибытия.
    
--     Количество заказов с прибывшим водителем можно посмотреть с помощью поля *arrive_to_client_time* 
-- (если оно пустое, значит, водитель в указанное место не прибыл).
    
-- - **Arrival 2 Ride** - отношение оконченных (доставленных до места) заказов к заказам с 
-- прибывшим на место водителем.
    
--     Количество оконченных заказов можно посмотреть с помощью поля *order_finish_time.*
    

-- И, наконец, ****постройте **основную воронку** из первого состояния в последнее:

-- - **Order 2 Ride** (**O2R**) - отношение количества выполненных заказов ко всем заказам.
    
--     Решение должно удовлетворять следующим условиям:
    
--     1. Все конверсии должны быть рассчитаны по всем наблюдениям из таблицы 
-- (без разбиения по когортам), но в разбивке по городам и тарифам (”*Москва-Эконом*”, “*Москва-Комфорт*”, 
-- “*Санкт-Петербург-Эконом*”, “*Санкт-Петербург-Комфорт*”).
--     2. Все конверсии должны быть также рассчитаны по всем данным, без разбиения по городам и тарифам.

-- без разбиения по городам и тарифам
select *
, count (id_driver) over ()*100.0 / count (id_order) over () O2O
, count (assign_time) over () *100.0 / count (id_driver) over () O2A
, count (arrive_to_client_time) over () *100.0 / count (assign_time) over () A2A
, count (order_finish_time) over ()*100.0 / count (arrive_to_client_time) over () A2R
, count (order_finish_time) over () *100.0 / count (id_order) over () O2R
from skytaxi.order_list o
join skytaxi.city_dict d on o.id_city = d.id_city
join skytaxi.tariff_dict t on o.id_tariff = t.id_tariff
where order_time between '2021-07-01' and '2021-07-31'


-- в разбивке по городам и тарифам (”Москва-Эконом”, “Москва-Комфорт”, “Санкт-Петербург-Эконом”, 
-- “Санкт-Петербург-Комфорт”)
select d.name_city
, t.name_tariff
, count (id_driver)*100.0 / count (id_order) O2O
, count (assign_time)*100.0 / count (id_driver) O2A
, count (arrive_to_client_time)*100.0 / count (assign_time) A2A
, count (order_finish_time)*100.0 / count (arrive_to_client_time) A2R
, count (order_finish_time)*100.0 / count (id_order) O2R
from skytaxi.order_list o
join skytaxi.city_dict d on o.id_city = d.id_city
join skytaxi.tariff_dict t on o.id_tariff = t.id_tariff
where order_time between '2021-07-01' and '2021-07-31'
and (d.name_city = 'Москва' or d.name_city = 'Санкт-Петербург')
and (t.name_tariff = 'Комфорт' or t.name_tariff ='Эконом')
group by t.name_tariff, d.name_city




